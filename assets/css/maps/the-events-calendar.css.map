{"version":3,"sources":["global/mixins/_button.scss","the-events-calendar.scss","global/mixins/_colours-helper.scss","global/mixins/_include-media.scss"],"names":[],"mappings":"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","file":"../the-events-calendar.css","sourcesContent":["@mixin lsx-button-scaffolding {\r\n\t&,\r\n\t&:active,\r\n\t&:visited {\r\n\t\tborder: 0 none;\r\n\t\tborder-radius: 3px;\r\n\t\tdisplay: inline-block;\r\n\t\tfont-size: 14px;\r\n\t\tfont-weight: 700;\r\n\t\theight: 48px;\r\n\t\tleft: 0;\r\n\t\tletter-spacing: 0.6px;\r\n\t\tline-height: 1.25;\r\n\t\tpadding: 15px 40px;\r\n\t\tposition: relative;\r\n\t\ttext-transform: uppercase;\r\n\t\ttop: 0;\r\n\t\ttransition: all 100ms ease;\r\n\t}\r\n\r\n\t& > .fa { margin-left: 10px; }\r\n}\r\n.button-holder {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n}\r\n@mixin lsx-bordered-button ($color: map-get($buttons, bg), $color-hover: map-get($buttons, color), $bg: transparent, $bg-hover: map-get($buttons, bg)) {\r\n\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover);\r\n\r\n\t&,\r\n\t&:active,\r\n\t&:visited {\r\n\t\tborder: 2px solid $color;\r\n\t\tbox-shadow: none;\r\n\t\theight: 50px;\r\n\t}\r\n\r\n\t&:active {\r\n\t\tleft: 0;\r\n\t\ttop: 0;\r\n\t}\r\n\r\n\ttransition: all 300ms ease;\r\n}\r\n\r\n@mixin custom-buttons-colours ($color: map-get($buttons, color), $color-hover: map-get($buttons, color-hover), $bg: map-get($buttons, bg), $bg-hover: map-get($buttons, bg-hover), $shadow: map-get($buttons, shadow)) {\r\n\t.btn {\r\n\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t}\r\n\r\n\t#respond {\r\n\t\t& > .comment-form {\r\n\t\t\tinput[type=\"submit\"] {\r\n\t\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.border-btn { @include lsx-bordered-button($bg, #FFF, transparent, $bg); }\r\n\r\n\t.white-border-btn { @include lsx-bordered-button(#FFF, $bg, transparent, #FFF); }\r\n\r\n\t#top-menu {\r\n\t\t.top-menu {\r\n\t\t\t& > .menu {\r\n\t\t\t\t& > .menu-item {\r\n\t\t\t\t\t&.cta {\r\n\t\t\t\t\t\t& > a {\r\n\t\t\t\t\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t&.cta-red {\r\n\t\t\t\t\t\t& > a {\r\n\t\t\t\t\t\t\t@include lsx-button-colour(#FFFFFF, #FFFFFF, #D93A3A, #9F2020, #9F2020);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#footer-cta {\r\n\t\tinput[type=\"submit\"] {\r\n\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t}\r\n\t}\r\n\r\n\t// WooCommerce\r\n\r\n\t#wc_am_lost_api_key_form {\r\n\t\tinput[type=\"submit\"] {\r\n\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t}\r\n\t}\r\n\r\n\t.lsx-wc-cart-menu-item {\r\n\t\t.widget_shopping_cart {\r\n\t\t\t.buttons {\r\n\t\t\t\t.button {\r\n\t\t\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.woocommerce-page #main {\r\n\t\t#respond input#submit,\r\n\t\ta.button:not(.quick-view-button),\r\n\t\tbutton.button,\r\n\t\tinput.button {\r\n\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t\tmin-height: 40px;\r\n    \t\theight: 100% !important;\r\n\t\t}\r\n\t}\r\n\r\n\t// Sensei\r\n\r\n\t.course-container,\r\n\t.course,\r\n\t.lesson,\r\n\t.quiz {\r\n\t\ta.button,\r\n\t\ta.comment-reply-link,\r\n\t\t#commentform #submit,\r\n\t\t.submit,\r\n\t\tinput[type=submit],\r\n\t\tinput.button,\r\n\t\tbutton.button {\r\n\t\t\t&:not(.btn) {\r\n\t\t\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.quiz {\r\n\t\tinput[type=submit] {\r\n\t\t\t&.complete:not(.btn) {\r\n\t\t\t\t@include lsx-button-colour($color, $color-hover, #63A95F, #4E8B4A, #457A42);\r\n\t\t\t}\r\n\r\n\t\t\t&.reset:not(.btn) {\r\n\t\t\t\t@include lsx-button-colour($color, $color-hover, #ED6C6E, #E73F41, #E5282B);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin custom-cta-buttons-colours ($color: map-get($cta-buttons, color), $color-hover: map-get($cta-buttons, color-hover), $bg: map-get($cta-buttons, bg), $bg-hover: map-get($cta-buttons, bg-hover), $shadow: map-get($cta-buttons, shadow)) {\r\n\t.cta-btn { @include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow); }\r\n\r\n\t.cta-border-btn { @include lsx-bordered-button($bg, #FFF, transparent, $bg); }\r\n\r\n\t// Caldera Form\r\n\r\n\t.caldera-forms-modal {\r\n\t\t@include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow);\r\n\t}\r\n\r\n\t// WooCommerce\r\n\r\n\t.lsx-wc-cart-menu-item {\r\n\t\t.widget_shopping_cart {\r\n\t\t\t.buttons {\r\n\t\t\t\t.button.checkout { @include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow); }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin custom-secondary-buttons-colours ($color: map-get($secondary-buttons, color), $color-hover: map-get($secondary-buttons, color-hover), $bg: map-get($secondary-buttons, bg), $bg-hover: map-get($secondary-buttons, bg-hover), $shadow: map-get($secondary-buttons, shadow)) {\r\n\t.secondary-btn { @include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow); }\r\n\r\n\t.secondary-border-btn { @include lsx-bordered-button($bg, #FFF, transparent, $bg); }\r\n}\r\n\r\n@mixin custom-tertiary-buttons-colours ($color: map-get($tertiary-buttons, color), $color-hover: map-get($tertiary-buttons, color-hover), $bg: map-get($tertiary-buttons, bg), $bg-hover: map-get($tertiary-buttons, bg-hover), $shadow: map-get($tertiary-buttons, shadow)) {\r\n\t.tertiary-btn { @include lsx-button-colour($color, $color-hover, $bg, $bg-hover, $shadow); }\r\n\r\n\t.tertiary-border-btn { @include lsx-bordered-button($bg, #FFF, transparent, $bg); }\r\n}\r\n","@import 'global/variables';\r\n@import 'global/mixins';\r\n@import 'global/placeholders';\r\n\r\n// Placeholders and Mixins\r\n\r\n%bootstrap-form-control {\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\theight: 50px;\r\n\t// padding: 6px 12px;\r\n\t// font-size: 15px;\r\n\t// line-height: 1.6;\r\n\tcolor: #4a4a4a;\r\n\tbackground-color: #fff;\r\n\tbackground-image: none;\r\n\tborder: 1px solid #DDD;\r\n\tborder-radius: 2px;\r\n\t// box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\r\n\t// transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\r\n\r\n\t// lsx-form-control\r\n\r\n\tborder-width: 2px;\r\n\tbox-shadow: none;\r\n\tfont-size: 18px;\r\n\tline-height: 1.33;\r\n\tpadding: 10px 20px;\r\n\ttransition: all 150ms ease;\r\n\r\n\t&:focus {\r\n\t\tborder-color: #418AD0;\r\n\t\t// outline: 0;\r\n\t\t// box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(65, 138, 208, 0.6);\r\n\t}\r\n}\r\n\r\n%bootstrap-message {\r\n\tborder-radius: 4px;\r\n\tborder: 1px solid transparent;\r\n\tmargin-bottom: 20px;\r\n\tpadding: 15px !important;\r\n\r\n\t&:before { display: none; }\r\n}\r\n\r\n%bootstrap-message-success {\r\n\tbackground-color: #dff0d8;\r\n\tborder-color: #d6e9c6;\r\n\tcolor: #3c763d;\r\n}\r\n\r\n%bootstrap-message-error {\r\n\tbackground-color: #f2dede;\r\n\tborder-color: #ebccd1;\r\n\tcolor: #a94442;\r\n}\r\n\r\n%bootstrap-message-info {\r\n\tbackground-color: #d9edf7;\r\n\tborder-color: #bce8f1;\r\n\tcolor: #31708f;\r\n}\r\n\r\n%small-form-field {\r\n\theight: 42px;\r\n\tpadding: 10px 12px;\r\n}\r\n\r\n%small-form-select {\r\n\theight: 42px;\r\n\tpadding: 0 12px;\r\n}\r\n\r\n%lsx-title {\r\n\tfont-size: 30px !important;\r\n\tline-height: 1.2;\r\n\tmargin-bottom: 4.25rem;\r\n\tmargin-top: 0;\r\n\ttext-align: center;\r\n\r\n\t&:after {\r\n\t\tcontent: '';\r\n\t\tdisplay: block;\r\n\t\theight: 2px;\r\n\t\tmargin: 2.4rem auto 0;\r\n\t\twidth: 80px;\r\n\t}\r\n\r\n\t& > small {\r\n\t\tcolor: inherit;\r\n\t\tdisplay: block;\r\n\t\tline-height: inherit;\r\n\t\tmargin-top: 8px;\r\n\r\n\t\t&.long-text { margin-top: 16px; }\r\n\t}\r\n}\r\n\r\n@mixin small-button() {\r\n\t&,\r\n\t&:active,\r\n\t&:visited {\r\n\t\theight: 40px;\r\n\t\tline-height: 20px;\r\n\t\tpadding: 10px 18px;\r\n\t}\r\n}\r\n\r\n// Structure\r\n\r\n#tribe-events-pg-template {\r\n\tmargin: 0 !important;\r\n\tmax-width: none !important;\r\n\tpadding: 0 !important;\r\n}\r\n\r\narticle.page {\r\n\t.page-template-default:not(.has-sidebar).tribe-theme-lsx & { width: 100% !important; }\r\n}\r\n\r\n.site-main {\r\n\t.archive:not(.has-sidebar).tribe-theme-lsx & { width: 100% !important; }\r\n}\r\n\r\n#tribe-bar-form {\r\n\t#tribe-bar-views {\r\n\t\tpadding: 0;\r\n\t\t.tribe-bar-views-list { padding: 0; }\r\n\t}\r\n\r\n\t.tribe-bar-submit {\r\n\t\tinput[type=submit] {\r\n\t\t\t@include lsx-button-scaffolding();\r\n\t\t\t@include lsx-button-colour();\r\n\t\t\t@include small-button();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.tribe-events-button {\r\n\tbox-shadow: 2px 2px 0 0 #7A030A;\r\n\t&, #tribe-events & {\r\n\t\t@include lsx-button-scaffolding();\r\n\t\t@include lsx-button-colour();\r\n\t\t@include small-button();\r\n\t}\r\n}\r\n.tribe-events-read-more {\r\n\tbackground-color: #a4050f !important;\r\n\tcolor: #ffffff !important;\r\n\tbox-shadow: 2px 2px 0 0 #7C040C !important;\r\n}\r\na.tribe-events-read-more {\r\n\t.content-area &:not(.btn) {\r\n\t\t@include lsx-button-scaffolding();\r\n\t\t@include lsx-button-colour();\r\n\t\t@include small-button();\r\n\t}\r\n}\r\n\r\n.tribe-events-notices {\r\n\t@extend %bootstrap-message;\r\n\t@extend %bootstrap-message-info;\r\n\tmargin-top: 0;\r\n\r\n\tul {\r\n\t\tmargin-bottom: 0 !important;\r\n\t\tpadding-left: 0 !important;\r\n\t}\r\n}\r\n\r\n#tribe-events-footer,\r\n#tribe-events-header  {\r\n\t.tribe-events-sub-nav {\r\n\t\tli {\r\n\t\t\tfont-weight: bold;\r\n\t\t\ta { background: none; }\r\n\t\t}\r\n\t}\r\n}\r\n\r\n#tribe-events-header {\r\n\tmargin-bottom: 0;\r\n\t.tribe-events-sub-nav { display: none; }\r\n}\r\n\r\n#tribe-events-footer {\r\n\t#comments + &,\r\n\t#respond + & {\r\n\t\tmargin-top: 8.5rem;\r\n\t}\r\n}\r\n\r\n.tribe-theme-lsx {\r\n\t.datepicker { min-width: 160px; }\r\n}\r\n\r\n#tribe-bar-collapse-toggle { line-height: 31px; }\r\n\r\n.tribe-events-calendar {\r\n\tth { font-weight: normal; }\r\n\r\n\ttd {\r\n\t\tdiv[id*=tribe-events-daynum-] {\r\n\t\t\t&, & a { font-size: 14px; }\r\n\t\t}\r\n\t}\r\n}\r\n\r\n#tribe-events-content {\r\n\tmargin-bottom: 0;\r\n\tpadding: 0;\r\n\ta {\r\n\t    color: #A4050F;\r\n\t}\r\n\t.tribe-events-tooltip {\r\n\t\th4 {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tpadding: 8px 12px;\r\n\t\t}\r\n\r\n\t\t.tribe-events-event-body {\r\n\t\t\toverflow: hidden;\r\n\t\t\tpadding: 10px 12px 0;\r\n\r\n\t\t\t.tribe-event-duration {\r\n\t\t\t\tfont-weight: bold;\r\n\r\n\t\t\t\t.tribe-events-abbr { margin-bottom: 12px; }\r\n\t\t\t}\r\n\r\n\t\t\t.tribe-event-description {\r\n\t\t\t\tpadding: 12px 0 0 0;\r\n\r\n\t\t\t\tp { margin-bottom: 12px; }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t&:not(.tribe-event-featured) {\r\n\t\t\t.tribe-events-event-thumb { padding: 12px 12px 12px 0; }\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.tribe-events-user-recurrence-toggle {\r\n\tinput[type=\"radio\"],\r\n\tinput[type=\"checkbox\"] { margin-right: 8px; }\r\n}\r\n\r\n.tribe-events-list-separator-month {\r\n\tfont-size: 18px;\r\n\tpadding: 8px 12px;\r\n\ttext-align: center;\r\n}\r\n\r\n.tribe-events-list {\r\n\t.tribe-events-list-event-title {\r\n\t\tfont-size: 30px;\r\n\t\tmargin-bottom: 12px;\r\n\t}\r\n\r\n\t.tribe-events-loop {\r\n\t\t.tribe-event-featured {\r\n\t\t\tmargin-top: 2.25em;\r\n\t\t\tpadding: 25px !important;\r\n\r\n\t\t\t.tribe-events-list-event-title {\r\n\t\t\t\tmargin-top: 0;\r\n\r\n\t\t\t\ta { vertical-align: middle; }\r\n\r\n\t\t\t\t.label {\r\n\t\t\t\t\tfont-size: 60%;\r\n\t\t\t\t\tmargin-left: 10px;\r\n\t\t\t\t\tpadding: 3px 12px;\r\n\t\t\t\t\ttext-transform: uppercase;\r\n\t\t\t\t\tvertical-align: middle;\r\n\r\n\t\t\t\t\t@include media ('<phone') { display: none; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.tribe-events-event-meta {\r\n\t\t\tfont-weight: normal;\r\n\t\t\ta {\r\n\t\t\t    color: #A4050F;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.type-tribe_events {\r\n\t\t\t@include media ('>=phone') {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t}\r\n\r\n\t\t\t.tribe-events-event-meta { margin-bottom: 12px; }\r\n\t\t}\r\n\r\n\t\t.tribe-events-event-image,\r\n\t\t.tribe-event-featured .tribe-events-event-image {\r\n\t\t\tfloat: none;\r\n\t\t\tmargin: 0 35px 0 0;\r\n\t\t\ttext-align: left;\r\n\t\t\twidth: 350px;\r\n\r\n\t\t\t@include media ('<phone') {\r\n\t\t\t\tmargin: 0 0 15px 0;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.tribe-events-event-content {\r\n\t\t\t@include media ('>=phone') { flex: 1 1 auto; }\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.tribe-events-day {\r\n\t.tribe-events-day-time-slot {\r\n\t\th5 {\r\n\t\t\tfont-size: 18px;\r\n\t\t\tmargin-top: 35px;\r\n\t\t\tpadding: 8px 12px;\r\n\t\t\ttext-align: center;\r\n\t\t}\r\n\r\n\t\t.type-tribe_events { margin-left: 0; }\r\n\t}\r\n}\r\n\r\nh2.tribe-events-page-title {\r\n\tfont-size: 30px;\r\n\tmargin-bottom: 35px;\r\n}\r\n\r\n#tribe-events-bar { margin-bottom: 35px; }\r\n\r\n.single-tribe_events {\r\n\t.tribe-events-back { display: none; }\r\n\t.tribe-events-single-event-title { font-size: 40px; }\r\n\t.tribe-events-event-image { text-align: left; }\r\n\r\n\t.tribe-events-schedule {\r\n\t\th2 { display: block; }\r\n\r\n\t\t.tribe-events-cost {\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tfont-size: 15px;\r\n\t\t\tfont-style: normal;\r\n\t\t\tfont-weight: 700;\r\n\t\t\tline-height: 1;\r\n\t\t\tpadding: 8px 12px;\r\n\t\t\ttext-align: center;\r\n\t\t\ttext-overflow: ellipsis;\r\n\t\t}\r\n\t}\r\n\r\n\t.tribe-events-event-meta {\r\n\t\tfont-size: inherit;\r\n\r\n\t\t.column,\r\n\t\t.tribe-events-meta-group {\r\n\t\t\tpadding: 0 25px;\r\n\t\t}\r\n\r\n\t\t.tribe-events-meta-group {\r\n\t\t\t.tribe-events-single-section-title {\r\n\t\t\t\tfont-size: 22px;\r\n\t\t\t\tfont-weight: normal;\r\n\t\t\t\tmargin: 20px 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.tribe-events-related-events-title { @extend %lsx-title; }\r\n\r\n.tribe-events-single {\r\n\tul.tribe-related-events {\r\n\t\tli {\r\n\t\t\t@include media ('>=phone') {\r\n\t\t\t\tmargin-right: 2%;\r\n\t\t\t\twidth: 32%;\r\n\t\t\t\t&:last-child { margin-right: 0; }\r\n\t\t\t}\r\n\r\n\t\t\t.tribe-related-event-info {\r\n\t\t\t\tpadding: 2rem;\r\n\t\t\t\ttext-align: center;\r\n\r\n\t\t\t\t.tribe-related-events-title { font-size: 20px; }\r\n\r\n\t\t\t\t.moretag {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tmargin: 2rem -2rem -2rem;\r\n\t\t\t\t\tpadding: 1rem 0;\r\n\t\t\t\t\ttext-align: center;\r\n\t\t\t\t\ttransition: background 300ms ease;\r\n\r\n\t\t\t\t\t&:after {\r\n\t\t\t\t\t\tcolor: inherit;\r\n\t\t\t\t\t\tcontent: '\\f178';\r\n\t\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\t\tfont-family: 'FontAwesome';\r\n\t\t\t\t\t\tfont-size: inherit;\r\n\t\t\t\t\t\tmargin-left: 5px;\r\n\t\t\t\t\t\ttext-rendering: auto;\r\n\r\n\t\t\t\t\t\t-webkit-font-smoothing: antialiased;\r\n\t\t\t\t\t\t-moz-osx-font-smoothing: grayscale;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.tribe-events-event-cost {\r\n\tfont-weight: bold;\r\n\t.ticket-cost { margin-left: 10px; }\r\n}\r\n.tribe_events {\r\n\t.cart {\r\n\t\tborder: 1px solid #E1E1E1;\r\n\t    background-color: #FFFFFF;\r\n\t    padding: 1em 2em;\r\n\t    margin-bottom: 2em;\r\n\t}\r\n}\r\n.tribe_events-template-default.single {\r\n\t.tribe-events-single-event-description {\r\n\t\tpadding: 0 2em 0 0;\r\n\t}\r\n}\r\n.tribe-button, .button.alt {\r\n    background-color: #F7AE00 !important;\r\n    color: #ffffff !important;\r\n    border: none;\r\n    width: 100%;\r\n    -webkit-font-smoothing: antialiased;\r\n    box-shadow: 2px 2px 0 0 #CE9100;\r\n\tpadding: 0.5em;\r\n    margin: 0em 0 1em 0;\r\n\r\n\tbr {\r\n\t\tdisplay:none;\r\n\t}\r\n}\r\n.tribe-events-tickets {\r\n\tbackground: #ffffff !important;\r\n\ttd {\r\n\t    padding: 10px 0 !important;\r\n\t    input {\r\n\t    \t&:focus {\r\n\t\t    \tborder-color: #418AD0;\r\n\t\t\t    outline: 0;\r\n\t\t\t    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(65, 138, 208, 0.6)\r\n\t\t    }\r\n\t    }\r\n\t    select {\r\n\t    \t&:focus {\r\n\t\t    \tborder-color: #418AD0;\r\n\t\t\t    outline: 0;\r\n\t\t\t    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(65, 138, 208, 0.6)\r\n\t\t    }\r\n\t    }\r\n\t}\r\n}\r\n.tribe-button.tribe-button--rsvp {\r\n\tmargin: 0;\r\n\t&:hover {\r\n\t\tbackground-color: #eda700 !important;\r\n\t}\r\n}\r\n.tribe-tickets-meta-row {\r\n    display: table-row;\r\n}\r\n.tribe-tickets-table {\r\n\twidth: 100%;\r\n\tlabel {\r\n\t    padding-right: 15px;\r\n\t}\r\n}\r\n.tribe-events-tickets input, .tribe-events-tickets select {\r\n    display: block;\r\n    width: 100%;\r\n    height: 50px;\r\n    color: #4A4A4A;\r\n    border: 1px solid #DDD;\r\n    border-radius: 2px;\r\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\r\n    transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\r\n    border-width: 2px;\r\n    box-shadow: none;\r\n    font-size: 18px;\r\n    line-height: 1.33;\r\n    padding: 10px 20px;\r\n    transition: all 150ms ease;\r\n}\r\n.tribe-events-tickets-title.tribe--rsvp {\r\n\tpadding: 0 10px;\r\n}\r\n\r\n@media (min-width: 992px) {\r\n\t.tribe_events .cart {\r\n\t\tfloat: right;\r\n\t    width: 40%;\r\n\t}\r\n\t.tribe_events-template-default.single .tribe-events-single-event-description {\r\n\t\t    float: left;\r\n\t    width: 60%;\r\n\t}\r\n}\r\n\r\n\r\n","@mixin lsx-link-colour ($color: nth($orange, 1), $hover: nth($orange, 2)) {\r\n\t&,\r\n\t&:active,\r\n\t&:visited {\r\n\t\tcolor: $color;\r\n\t}\r\n\r\n\t&:hover,\r\n\t&:hover:active,\r\n\t&:focus {\r\n\t\tcolor: $hover;\r\n\t}\r\n}\r\n\r\n@mixin lsx-button-colour ($color: #FFF, $color-hover: #FFF, $bg: nth($blue, 1), $bg-hover: nth($blue, 3), $shadow: darken(nth($blue, 1), 15%)) {\r\n\t&,\r\n\t&:active,\r\n\t&:visited {\r\n\t\tbackground-color: $bg;\r\n\t\tbox-shadow: 2px 2px 0 0 $shadow;\r\n\t\tcolor: $color;\r\n\t}\r\n\r\n\t&:hover,\r\n\t&:hover:active,\r\n\t&:focus {\r\n\t\tbackground-color: $bg-hover;\r\n\t\tcolor: $color-hover;\r\n\t}\r\n\r\n\t&:active {\r\n\t\tleft: 2px;\r\n\t\ttop: 2px;\r\n\t\tbox-shadow: 0 0 0 0 $shadow;\r\n\t}\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//                http://include-media.com\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': $screen-sm-min,\r\n  'tablet': $screen-md-min,\r\n  'desktop': $screen-lg-min\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}